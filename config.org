#+TITLE: Configuration
#+AUTHOR: Kris

I have been using emacs on and off for few years. Then i stopped using it in favour of the VSCode for all of my development.
Recently, after few minor issues with the VSCode i decided to restart my relationship with Emacs. 
I wiped my entire old config and decideed to start from *scratch* (wink, wink).


* Global settings

This is me:
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Krzysztof Grobelak"
	  user-mail-address "krzysztof.grobelak@gmail.com")
#+END_SRC

Organize windows nicely
#+BEGIN_SRC emacs-lisp
(use-package zoom
  :ensure t
  :config
  (zoom-mode t))
#+END_SRC

* Common settings 

** Packages repository
The package repositories. Lets start from the 2 fundamental ones. I saw people also using the 'org' and 'gnu'
repositories. If the need arises we can add it in.
#+BEGIN_SRC emacs-lisp
(package-initialize)
(setq use-package-always-ensure t)

(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(unless (assoc-default "melpa-stable" package-archives)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages") t))

#+END_SRC


** Package manager
The use-package makes everything so simple. My previous way of using 'require' was a bit cumbersome. 
Especially since i did not fully know what i was exactly doing...but shhhhh.
#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(defvar use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)

#+END_SRC


** Custom settings file
We will place those in a separate file to avoid all clutter
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom_settings.el")
(load custom-file t)
#+END_SRC


** Dependencies
There is few pacakages that require this as dependency
#+BEGIN_SRC emacs-lisp
(use-package cl
  :ensure t)
#+END_SRC


** Buffers

Ido package offers better management and switching of the minibuffer items
#+BEGIN_SRC emacs-lisp
(use-package ido)
(ido-mode 1)
#+END_SRC

Fuzzy finders are great
#+BEGIN_SRC emacs-lisp
(use-package fzf
  :ensure t)
#+END_SRC

Colorize strings
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+END_SRC


** Theme
Still looking for the perfect theme. So far this one is the best for me. I will look at tweaking it a little bit 
in the future.
#+BEGIN_SRC emacs-lisp
;;(use-package kaolin-themes)
;;(load-theme 'kaolin-galaxy)
(use-package gruvbox-theme)
(load-theme 'gruvbox-dark-hard)
#+END_SRC


** Look and feel

Most of this settings are pretty self explanatory.
#+BEGIN_SRC emacs-lisp
(defvar mac-option-key-is-meta nil)
(defvar mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)

(if (fboundp 'menu-bar-mode) (menu-bar-mode 0))
(if (fboundp 'tool-bar-mode) (tool-bar-mode 0))
(setq inhibit-startup-message t)

(prefer-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8-auto-unix)
#+END_SRC

I would love to be able to use fish as my shell but there is plenty of issues with it. 
So we need to fallback to the basic stuff.
#+BEGIN_SRC emacs-lisp
(setq shell-file-name "/bin/bash")
#+END_SRC

Fonts, columns, line numbering, etc...
#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard t)

(defalias 'yes-or-no-p 'y-or-n-p)
(global-hl-line-mode 1)

(set-frame-font "Monaco 13")

(global-linum-mode t)
(defvar linum-format "%4d \u2502 ")

;; Higlight matching parentesis
(show-paren-mode)

(setq fill-column 80)
#+END_SRC

Some basic keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "M-+") 'text-scale-increase)
(global-set-key (kbd "M--") 'text-scale-decrease)
(defun kg/text-scale-reset ()
  "Set the scale back to original size."
  (interactive)
  (text-scale-set 0))
(global-set-key (kbd "M-0") 'kg/text-scale-reset)
(global-set-key (kbd "C-c C-k") 'compile)
#+END_SRC

Env variables
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

Place cursor in the last location
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :defer nil
  :config
  (save-place-mode))
#+END_SRC

Set up powerline. Not the one from MELPA but its fork: [powerline](https://github.com/jonathanchu/emacs-powerline)
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/other/emacs-powerline")
(require 'powerline)
(setq powerline-arrow-shape 'arrow) 
#+END_SRC

Maximize window on startup
#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+END_SRC


** Backups and history
Backups
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name (concat user-emacs-directory "backups")))))
(setq backup-by-copying t)
(setq delete-old-versions t kept-new-versions 4 kept-old-versions 2 version-control t)
#+END_SRC

History
#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/history")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
	  '(kill-ring
		search-ring
		regexp-search-ring))

#+END_SRC


** Editor

Do not use tabs. Default 4 spaces.
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode t)
(setq-default tab-width 4)
#+END_SRC


* Custom functions

For now just few helpers to quickly move the text around.

#+BEGIN_SRC emacs-lisp
(defun kg/move-line-up ()
  (interactive)
  (transpose-lines 1)
  (forward-line -2))

(defun kg/move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1))

(defun kg/move-words-forward ()
  (interactive)
  (forward-word 1)
  (forward-char 1)
  (transpose-words 1)
  (backward-word 1))


(defun kg/move-words-backward ()
  (interactive)
  (transpose-words 1)
  (backward-word 1))

(global-set-key (kbd "M-<up>") 'kg/move-line-up)
(global-set-key (kbd "M-<down>") 'kg/move-line-down)
(global-set-key (kbd "M-<right>") 'kg/move-words-forward)
(global-set-key (kbd "M-<left>") 'kg/move-words-backward)

#+END_SRC


* IRC client
I still use the IRC quite often. Swithing between windows get old very quickly. 
Having this all in one place is massive productivity boost.
#+BEGIN_SRC emacs-lisp
(load "~/.private.el")
(use-package erc
  :ensure t
  :config
  (erc-autojoin-mode t)
  (erc-services-mode 1)

  (setq erc-prompt-for-nickserv-password nil)
  (setq erc-nickserv-passwords
		'((freenode (("caspinol" . ,freenode-password))))))
;; IRC auto connect on C-c ef
(global-set-key "\C-cef" (lambda () 
						   (interactive)
                           (erc :server "irc.freenode.net"
                                :port "6667"
                                :nick "caspinol"
                                )))

;; now auto join channels
(setq erc-autojoin-channels-alist '(("freenode.net"
                                     "#rust" "##c" "#rust-embedded" "#rust-networking")))
#+END_SRC


* Coding

Now the meat of the config. 

** Common
*** Code completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :init
  (setq company-minimum-prefix-length 2
		company-require-match 0
		company-selection-wrap-around t
		company-dabbrev-downcase nil
		company-tooltip-limit 20
		company-tooltip-align-annotations 't
		company-idle-delay .4
		company-begin-commands '(self-insert-command))
  (eval-after-load 'company
    '(add-to-list 'company-backends '(company-files
									  company-capf)))
  :config
  (global-company-mode))
#+END_SRC


*** Code autocompletion

Both the flycheck and Language Server Protocol are very handy. 

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :diminish flycheck-mode
  :defer 2
  :config
  (global-flycheck-mode))

#+END_SRC

eglot is a new LSP client. Lets test it.
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :pin melpa
  :ensure t
  :hook
  (rust-mode . eglot-ensure)
  :bind
  ("C-c h" . 'eglot-help-at-point))
#+END_SRC


Highlight the pairs of braces and quotes.
#+BEGIN_SRC emacs-lisp
(use-package autopair
  :ensure t
:config
(electric-pair-mode))
#+END_SRC


*** Versioning

Git support. The tool is great so far but i only licked the surface so far.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x m" . magit-status))
#+END_SRC


** Javascript

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :mode ("\\.js$" . js2-mode)
  :config
  (setq js-indent-level 2))

;; Cool javascript formatter
(use-package prettier-js
  :ensure t
  :config
  (setq prettier-js-args '(
						   "--trailing-comma" "es5"
						   "--single-quote" "true"
						   "--print-width" "100"
						   ))
  (add-hook 'js2-mode-hook 'prettier-js-mode))
#+END_SRC

Replace the 'function' keyword with a shorthand symbol. Its just estetics...
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords
 'js2-mode `(("\\(function\\).*("
			  (0 (progn (compose-region (match-beginning 1)
										(match-end 1) "\u0192")
						nil)))))
#+END_SRC 


** Vue

Will use both modes
#+BEGIN_SRC emacs-lisp
(use-package vue-mode
  :ensure t
  :config
  (setq js-indent-level 2)
  (setq mmm-submode-decoration-level 2)
  (add-hook 'mmm-mode-hook
			(lambda ()
              (set-face-background 'mmm-default-submode-face nil))))
#+END_SRC


** JSON
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t
  :mode "\\.json$")
#+END_SRC


** Web
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode ("\\.html$" . web-mode))
#+END_SRC


** CSS
#+BEGIN_SRC emacs-lisp
(add-hook 'css-mode-hook 'rainbow-mode)
#+END_SRC


** C
#+BEGIN_SRC emacs-lisp
(use-package irony
  :ensure t
  :hook (c-mode . irony-mode))

(use-package company-irony
  :ensure t
  :after company
  :config
  (add-to-list 'company-backends 'company-irony))

(use-package flycheck-irony
  :ensure t
  :after flycheck
  :hook (flycheck-mode . flycheck-irony-setup))
#+END_SRC


** Rust

The main config file for Rust projects is in .toml format... so why not.
#+BEGIN_SRC emacs-lisp
(use-package toml-mode
  :ensure t)
#+END_SRC

Trying our the new mode.
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :mode ("\\.rs$" . rust-mode)
  :hook
  (rust-mode . (lambda()
				 (local-set-key (kbd "TAB") 'company-indent-or-complete-common)))
  :config
  (setq rust-format-on-save t)
  :bind
  ("C-c C-b" . rust-compile)
  ("C-c e r" . eglot-rename))
#+END_SRC

Flycheck rust
#+BEGIN_SRC emacs-lisp
(use-package flycheck-rust
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

Cargo mode
#+BEGIN_SRC emacs-lisp
(use-package cargo
  :ensure t
  :hook (rust-mode . cargo-minor-mode))
#+END_SRC


** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
		 ("\\.md\\'" . markdown-mode)
		 ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :hook
  (markdown-mode . visual-line-mode)
  (markdown-mode . variable-pitch-mode))
#+END_SRC


* Org

Default org document directory
#+BEGIN_SRC emacs-lisp
(use-package org
  :bind
  ("C-c l" . org-store-link)
  ("C-c a" . org-agenda)
  ("C-c c" . org-capture)
  :custom
  (org-log-done t)
  (org-startup-indented t)
  (org-confirm-babel-evaluate nil)
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-hide-emphasis-markers t)
  (org-src-preserve-indentation t)
  (org-directory "~/Dropbox/OrgDoc")
  (org-agenda-files (list "~/Dropbox/OrgDoc/Agenda/" "~/Dropbox/OrgDoc/Projects/" "~/Dropbox/OrgDoc/"))
  (org-default-notes-file (concat org-directory "/refile.org"))
  (org-deadline-warning-days 7)
  (org-agenda-span 'fortnight)
  (org-agenda-skip-scheduled-if-deadline-is-shown t)
  :config
  (setq org-capture-templates
        '(("t" "TODO" entry 
		   (file+headline org-default-notes-file "Task")
           "* TODO %? %^G \n  %U" :empty-lines 1)
          
		  ("s" "Scheduled TODO" entry 
		   (file+headline "~/Dropbox/OrgDoc/Projects/enet.org" "Task")
           "* TODO %? %^G \nSCHEDULED: %^t\n  %U" :empty-lines 1)
          
		  ("d" "Deadline" entry 
		   (file+headline "~/Dropbox/OrgDoc/Projects/enet.org" "Task")
           "* TODO %? %^G \n  DEADLINE: %^t" :empty-lines 1)
          
		  ("a" "Appointment" entry 
		   (file+headline org-default-notes-file "Life")
           "* %? %^G \n  %^t")
		  
		  ("i" "Idea" entry 
		   (file+headline org-default-notes-file "Idea")
		   "* Idea %? %^G\n%U" :empty-lines 1)
          
		  ("n" "Note" entry 
		   (file+headline org-default-notes-file "Notes")
           "* %? %^G\n%U" :empty-lines 1))))

#+END_SRC


Use the fancy bullets in org-mode.
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :hook
  (org-mode . (lambda() 
			  (org-bullets-mode 1))))
#+END_SRC

Some helpers for org-mode
#+BEGIN_SRC emacs-lisp
;; Export as markdown files
(use-package ox-md
  :ensure nil
  :defer 3
  :after org)

;; Hugo support
(use-package ox-hugo
  :defer 3
  :after org)

(use-package babel
  :ensure t
  :init
  (defvar org-confirm-babel-evaluate nil)
  :defer t)

(use-package ob-rust
  :ensure t)
#+END_SRC


* Yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (setq yas-snipped-dirs '("~/.emacs.d/snippets/"))
  (yas-global-mode 1))

#+END_SRC


* Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC
